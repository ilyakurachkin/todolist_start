{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","title","tasks","map","t","key","id","type","checked","isDone","onClick","removeTasks","changeFilter","App","useState","setTasks","filter","setFilter","tasksForTodolist","className","Id","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8QAqDeA,G,MApCE,SAACC,GACd,OACI,6BACI,4BAAKA,EAAMC,OACX,6BACI,gCACA,sCAEJ,4BACKD,EAAME,MAAMC,KAAI,SAACC,GACd,OACI,wBAAIC,IAAKD,EAAEE,IACP,2BAAOC,KAAK,WAAWC,QAASJ,EAAEK,SAClC,8BAAOL,EAAEH,OACT,4BAAQS,QAAS,WACbV,EAAMW,YAAYP,EAAEE,MADxB,eAOhB,6BACI,4BAAQI,QAAS,WACbV,EAAMY,aAAa,SADvB,OAGA,4BAAQF,QAAS,WACbV,EAAMY,aAAa,YADvB,UAGA,4BAAQF,QAAS,WACbV,EAAMY,aAAa,eADvB,iBCMDC,MA7Cf,WACI,MAAsBC,mBAClB,CACI,CAAER,GAAI,EAAEL,MAAO,WAAWQ,QAAQ,GAClC,CAAEH,GAAI,EAAEL,MAAO,KAAKQ,QAAQ,GAC5B,CAAEH,GAAI,EAAEL,MAAO,UAAUQ,QAAQ,GACjC,CAAEH,GAAI,EAAEL,MAAO,UAAUQ,QAAQ,KALzC,mBAAKP,EAAL,KAAWa,EAAX,KASA,EAA0BD,mBAA2B,OAArD,mBAAKE,EAAL,KAAaC,EAAb,KACIC,EAAmBhB,EAsBvB,MApBe,WAAXc,IACAE,EAAmBhB,EAAMc,QAAO,SAAAd,GAAK,OAAKA,EAAMO,WAErC,cAAXO,IACAE,EAAmBhB,EAAMc,QAAO,SAAAd,GAAK,OAAIA,EAAMO,WAiB/C,yBAAKU,UAAU,OACX,kBAAC,EAAD,CACIlB,MAAQ,gBACRC,MAAOgB,EACPP,YAhBZ,SAAqBS,GACjBlB,EAAQA,EAAMc,QAAO,SAAAd,GAAK,OAAIA,EAAMI,KAAOc,KAC3CL,EAASb,IAeDU,aAZZ,SAAsBS,GAClBJ,EAAUI,QCtBEC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d4d6f611.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FilterValuesType} from \"./App\";\r\n\r\ntype TypeTitleProps = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTasks: (id: number) => void\r\n    changeFilter: (value:FilterValuesType)=> void\r\n}\r\n\r\ntype TaskType = {\r\n    id: number,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\n\r\n\r\nconst Todolist = (props: TypeTitleProps) => {\r\n    return (\r\n        <div>\r\n            <h3>{props.title}</h3>\r\n            <div>\r\n                <input/>\r\n                <button>+</button>\r\n            </div>\r\n            <ul>\r\n                {props.tasks.map((t) => {\r\n                    return (\r\n                        <li key={t.id}>\r\n                            <input type=\"checkbox\" checked={t.isDone}/>\r\n                            <span>{t.title}</span>\r\n                            <button onClick={()=>{\r\n                                props.removeTasks(t.id)\r\n                            }}>âœ–</button>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n            <div>\r\n                <button onClick={()=> {\r\n                    props.changeFilter('All')\r\n                }}>All</button>\r\n                <button onClick={()=> {\r\n                    props.changeFilter('Active')\r\n                }}>Active</button>\r\n                <button onClick={()=>{\r\n                    props.changeFilter('Completed')\r\n                }}>Completed</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todolist;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Todolist from \"./Todolist\";\r\n\r\nexport type FilterValuesType = 'All' | 'Active' | 'Completed'\r\n\r\nfunction App() {\r\n    let [tasks,setTasks] =useState(\r\n        [\r\n            { id: 1,title: 'HTML&CSS',isDone: true},\r\n            { id: 2,title: 'Js',isDone: true},\r\n            { id: 3,title: 'ReactJs',isDone: false},\r\n            { id: 4,title: 'ReactJs',isDone: false}\r\n        ]\r\n    )\r\n\r\n    let [filter, setFilter] = useState<FilterValuesType>('All')\r\n    let tasksForTodolist = tasks\r\n\r\n    if (filter === 'Active') {\r\n        tasksForTodolist = tasks.filter(tasks => !tasks.isDone)\r\n    }\r\n    if (filter === 'Completed') {\r\n        tasksForTodolist = tasks.filter(tasks => tasks.isDone)\r\n    }\r\n\r\n\r\n\r\n    function removeTasks(Id: number ) {\r\n        tasks = tasks.filter(tasks => tasks.id !== Id)\r\n        setTasks(tasks)\r\n    }\r\n\r\n    function changeFilter(value:FilterValuesType) {\r\n        setFilter(value)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Todolist\r\n                title = \"What to learn\"\r\n                tasks={tasksForTodolist}\r\n                removeTasks={removeTasks}\r\n                changeFilter={changeFilter}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n        process.env.PUBLIC_URL,\n        window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}